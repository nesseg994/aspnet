@model CloudKids.Domain.Entities.Product

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutProduct.cshtml";
}
@*
    <h2>Edit</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Product</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DateAddition, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DateAddition, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DateAddition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.imagePath, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.imagePath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.imagePath, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.imagePath1, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.imagePath1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.imagePath1, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.imagePath2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.imagePath2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.imagePath2, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.imagePath3, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.imagePath3, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.imagePath3, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StockStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.StockStatus, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StockStatus, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

*@


<head>
    <style>
        .image-upload > input {
            display: none;
        }

        .image-upload1 > input {
            display: none;
        }

        .image-upload2 > input {
            display: none;
        }

        img {
            max-width: 180px;
        }

        input[type=file] {
            padding: 10px;
            background: #2d2d2d;
        }
    </style>

</head>

<section class="pager-section style2">
    <div class="container">
        <div class="pager-cont">
            <div class="page-search">
                <form>
                    <input type="text" name="search" placeholder="Search">
                    <button type="submit"><i class="fa fa-search"></i></button>
                </form>
            </div><!--page_details end-->
            <div class="page_links">
                <ul class="user-acc">
                    <li><a href="#" title="">Home</a></li>
                    <li><span>Add Product</span></li>
                </ul>
            </div><!--page_links end-->
        </div><!--pager-cont end-->
    </div>
</section><!--pager-section end-->


@using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{


    @Html.AntiForgeryToken()




    <section class="block2">
        <div class="container">
            <div class="checkout-form">
                <form>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="billing-details">
                                <h3 class="ck-title">Product</h3>

                                <div class="row">

                                    <div class="col-lg-6">
                                        <div class="form-field">
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            @Html.HiddenFor(model => model.Id)
                                            <label>Name </label>
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-6">
                                        <div class="form-field">
                                            <label>Quantity </label>
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-6">
                                        <div class="form-field">
                                            <label>Price </label>
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>



                                    <div class="col-lg-6">
                                        <div class="form-field">
                                            <label>Description </label>
                                            <div class="col-md-10">
                                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-6">
                                        <div class="form-field">
                                            <div class="form-group">
                                                <label> Category </label>
                                                <div class="col-md-10">
                                                    @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                </div>





                            </div>

                        </div>
                        <div class="col-lg-6">
                            <div class="addition-information">
                                <h3 class="ck-title">Product Images</h3>
                                <div class="form-field">
                                    <div class="col-lg-6">
                                        <div class="form-group">
                                            <label>image </label>
                                            <div class="col-md-10">
                                                <div class="col-md-10">
                                                    @* <input type="file" name="imageFile" required />*@
                                                    <div class="image-upload">
                                                        <label for="file-input">
                                                            <img id="blah"  src="@Html.DisplayFor(model => model.imagePath)" />
                                                        </label>
                                                        <input id="file-input" type="file" name="imageFile" onchange="readURL(this);" required />
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-10">
                                                <div class="col-md-10">
                                                    @* <input type="file" name="imageFile" required />*@
                                                    <div class="image-upload1">
                                                        <label for="file-input1">
                                                            <img id="blah1" src="@Html.DisplayFor(model => model.imagePath1)" />
                                                        </label>
                                                        <input id="file-input1" type="file" name="imageFile1" onchange="readURL1(this);" required />
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-10">
                                                <div class="col-md-10">
                                                    @* <input type="file" name="imageFile" required />*@
                                                    <div class="image-upload2">
                                                        <label for="file-input2">
                                                            <img id="blah2" src="@Html.DisplayFor(model => model.imagePath2)" />
                                                        </label>
                                                        <input id="file-input2" type="file" name="imageFile2" onchange="readURL2(this);" required />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div><!--form-field end-->
                            </div><!--addition-information end-->
                        </div>

                    </div>

                    <div class="col-lg-12">
                        <div class="form-field">
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Save" class="btn btn-default" />
                                </div>
                            </div>
                        </div>
                    </div>




                    @*
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10 text-success">
                                @ViewBag.FileStatus
                            </div>
                        </div>
                    *@

                </form>
            </div><!--checkout-form end-->
        </div>
    </section>




}

<div>
    @Html.ActionLink("back to the shop", "Index")
</div>


<a href="#" title="" class="scrollTop"><i class="fa fa-arrow-up"></i></a>

<script>
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#blah')
                    .attr('src', e.target.result);
            };

            reader.readAsDataURL(input.files[0]);
        }
    }

    function readURL1(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#blah1')
                    .attr('src', e.target.result);
            };

            reader.readAsDataURL(input.files[0]);
        }
    }

    function readURL2(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#blah2')
                    .attr('src', e.target.result);
            };

            reader.readAsDataURL(input.files[0]);
        }
    }

</script>
